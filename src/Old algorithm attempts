protected static void MyNewList(){

        ArrayList<Integer> availableSeats = new ArrayList<>();

        for (int i = 0; i < seats.size(); i++){
            availableSeats.add(i);
            System.out.println("availableSeats[" + i + "] added");
        }
        int numbAvailSeats = availableSeats.size();
        ArrayList<Person> nonSeatedPeople = People.persons;
        ArrayList<Person> seatedPeople = new ArrayList<>();
        ArrayList<Person> calculatedPeople = new ArrayList<>();

        while(numbAvailSeats > 0) {
            if (seatedPeople.size() == 0) {
                seatPerson(nonSeatedPeople.get(0), availableSeats.get(0));
                seatedPeople.add(nonSeatedPeople.get(0));
                nonSeatedPeople.remove(0);
                calculatedPeople.add(nonSeatedPeople.get(0));
                numbAvailSeats--;
            }
            else {
                for (Person p : seatedPeople) {
                    for (Person p2 : calculatedPeople) {
                        if (!p.equals(p2)) {
                            calculatedPeople.add(p);
                            String nextPerson = Calculate_Happiness.getNameOfHighestScorer(p.name);
                            seatPerson(People.getPerson(nextPerson),availableSeats.get(0));
                            numbAvailSeats--;
                            break;
                        }
                    }
                }
            }
        }
        System.out.println("Seated People: ");
        for (Person p:seatedPeople) {
            System.out.print(p.name + ", ");
        }
        System.out.println("\n"+"NonSeated People: ");
        for (Person p:nonSeatedPeople) {
            System.out.print(p.name + ", ");
        }
        System.out.println("\n");
    }

    -----------------------------------------------------------------------------------------------------------------------------------------

        protected static void SequentialSeating(){
            ArrayList<Integer> availableSeats = new ArrayList<>();
            for (int i = 0; i < seats.size(); i++){
                availableSeats.add(i);
                System.out.println("availableSeats[" + i + "] added");
            }
            ArrayList<Person> nonSeatedPeople = People.persons;
            ArrayList<Person> seatedPeople = new ArrayList<>();
            String highestScorer;


            for (int i = 1; i < nonSeatedPeople.size(); i ++) {
            Person currentPerson = nonSeatedPeople.get(0);
                for(int j = 0; j < availableSeats.size(); j++) {
                    if(seatPerson(currentPerson, availableSeats.get(j))) {
                        seatedPeople.add(currentPerson);

                        highestScorer = Calculate_Happiness.getHighestScorerExcluding(currentPerson.name, seatedPeople);
                        boolean success = false;
                        for(int k = 0; k < 2; k++){
                            if(seatPerson(People.getPerson(highestScorer), getNeighbourSeats(availableSeats.get(j)).get(k))) {
                                seatedPeople.add(People.getPerson(highestScorer));
                                nonSeatedPeople.remove(highestScorer);

                                availableSeats.remove(0);
                                availableSeats.remove(getNeighbourSeats(availableSeats.get(0)).get(0));
                                success = true;
                                break;
                            }
                        }
                        if(!success){
                            System.out.println("No space!");
                        }

                        nonSeatedPeople.remove(0);
                    break;
                    }
                }
            }
            System.out.println("Seated People: ");
            for (Person p:seatedPeople) {
                System.out.print(p.name + ", ");
            }
            System.out.println("\n"+"NonSeated People: ");
            for (Person p:nonSeatedPeople) {
                System.out.print(p.name + ", ");
            }
            System.out.println("\n");
        }

        -------------------------------------------------------------------------------------------------------------------------
        protected static void Alpha(String name){
                ArrayList<Integer> availableSeats = new ArrayList<>();
                for (int i = 0; i < seats.size(); i++){
                    availableSeats.add(i);
                }
                ArrayList<Person> seatedPeople = new ArrayList<>();



                String highestScorer;
                String secondHighestScorer;

                    Person currentPerson = People.getPerson(name);
                    seatPerson(currentPerson, availableSeats.get(0));
                    highestScorer = Calculate_Happiness.getNameOfHighestScorer(currentPerson.name);
                    seatedPeople.add(People.getPerson(highestScorer));
                    secondHighestScorer = Calculate_Happiness.getHighestScorerExcluding(currentPerson.name, seatedPeople);

                    System.out.println("highestScorer" +Calculate_Happiness.getHighestScorerFromRemaining(currentPerson.name, People.persons));
                    System.out.println( "nonseatedPeople.remove: " + People.persons.remove(highestScorer));
                    System.out.println( "secondHighestScorer: " + Calculate_Happiness.getHighestScorerFromRemaining(currentPerson.name, People.persons));

                    System.out.println("Neighbours: ");
                    System.out.println(getNeighbourSeats(availableSeats.get(0)).get(0));
                    System.out.println(getNeighbourSeats(availableSeats.get(0)).get(1));

                    seatPerson(People.getPerson(highestScorer), getNeighbourSeats(availableSeats.get(0)).get(0));
                    seatPerson(People.getPerson(secondHighestScorer), getNeighbourSeats(availableSeats.get(0)).get(1));
            }
            -----------------------------------------------------------------------------------------------------------------------------------------------
             /*Seats all people, starting in alphabetical order and finding the best neighbours*/
                protected static void AlphabeticalHappinessSeating(){
                    ArrayList<Integer> availableSeats = new ArrayList<>();
                    for (int i = 0; i < seats.size(); i++){
                        availableSeats.add(i);
                        System.out.println("availableSeats[" + i + "] added");
                    }
                    ArrayList<Person> nonSeatedPeople = People.persons;

                    ArrayList<Person> seatedPeople = new ArrayList<>();
                    String highestScorer;
                    String secondHighestScorer;


                    for (int i = 1; i < nonSeatedPeople.size()-1; i ++) {
                        if(nonSeatedPeople.size() == 1 && availableSeats.size() == 1){
                            seatPerson(nonSeatedPeople.get(0), availableSeats.get(0));
                        }
                        else if(nonSeatedPeople.size() == 2){

                        }
                        else {
                            Person currentPerson = nonSeatedPeople.get(0);
                            seatPerson(currentPerson, availableSeats.get(0));
                            highestScorer = Calculate_Happiness.getNameOfHighestScorer(currentPerson.name);
                            nonSeatedPeople.remove(highestScorer);
                            secondHighestScorer = Calculate_Happiness.getHighestScorerFromRemaining(currentPerson.name, nonSeatedPeople);

                            seatedPeople.add(People.getPerson(highestScorer));
                            secondHighestScorer = Calculate_Happiness.getHighestScorerExcluding(currentPerson.name, seatedPeople);

                            seatPerson(People.getPerson(highestScorer), getNeighbourSeats(availableSeats.get(0)).get(0));
                            seatPerson(People.getPerson(secondHighestScorer), getNeighbourSeats(availableSeats.get(0)).get(1));
                            nonSeatedPeople.remove(0);
                        }
                        if(availableSeats.size() > 3) {
                            availableSeats.remove(0);
                            availableSeats.remove(getNeighbourSeats(availableSeats.get(0)).get(0));
                            availableSeats.remove(getNeighbourSeats(availableSeats.get(0)).get(1));
                        }
                    }
                }

                ----------------------------------------------------------------------------------------------------------------------------------
                 static ArrayList<String> seatPeople(){
                        ArrayList<String> seating = new ArrayList<>();
                        ArrayList<Person> unseatedPeople = People.persons;
                        ArrayList<Person> seatedPeople = People.persons;
                        int emptySeats = getNumOfEmptySeats();
                        System.out.println("Number of empty seats: " + emptySeats);
                        while(emptySeats > 0){
                            if(emptySeats == People.getNumberOfPeople()) {
                                ArrayList<Person> firstPair =Calculate_Happiness.getHighestScoringPair();
                                for (Person p: firstPair) {
                                    seatPerson(p, getFirstAvailableSeat());
                                    seatedPeople.add(p);
                                    unseatedPeople.remove(p);
                                }
                            }
                            else{
                                for(int i = 0; i < seatedPeople.size(); i++){
                                    if(!seats.get(i).isEmpty()){
                                        for (int position:getNeighbourSeats(i)) {
                                            if(seats.get(position).isEmpty()){
                                                for (Person p: seatedPeople) {
                                                    if (!p.equals(People.getPerson(Calculate_Happiness.getNameOfHighestScorer(seats.get(i), unseatedPeople)))){
                                                        if(seatPerson(People.getPerson(Calculate_Happiness.getNameOfHighestScorer(seats.get(i), unseatedPeople)), position)){
                                                            seating.add(People.getPerson(Calculate_Happiness.getNameOfHighestScorer(seats.get(i), unseatedPeople)).name);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            emptySeats = getNumOfEmptySeats();
                            System.out.println("Number of empty seats: " + emptySeats);
                        }
                        System.out.println("Seated People: ");
                        for (Person p:seatedPeople) {
                            System.out.print(p.name + ", ");
                        }
                        System.out.println("\n");

                        return seating;
                    }

                     private static int getFirstAvailableSeat() {
                            for (int i = 0; i < getNumSeats(); i++){
                                if (seats.get(i).isEmpty())
                                    return i;
                            }
                            return -1;
                        }
                        -----------------------------------------------------------------------------------------------
                            static int calculateTotalHappinessOfTable(ArrayList<String> seating){
                                int totalHappiness = 0;
                                System.out.println("seating.length: " + seating.size());
                                for (int i = 0; i < seating.size(); i++){
                                    try {
                                        if (i == 0) {
                                            totalHappiness += Calculate_Happiness.calcHappinessBetweenTwo(People.getPerson(seating.get(i)).name, People.getPerson(seating.get(seating.size() - 1)).name);
                                            totalHappiness += Calculate_Happiness.calcHappinessBetweenTwo(People.getPerson(seating.get(i)).name, People.getPerson(seating.get(i + 1)).name);
                                        } else if (i == (seating.size() - 1)) {
                                            totalHappiness += Calculate_Happiness.calcHappinessBetweenTwo(People.getPerson(seating.get(i)).name, People.getPerson(seating.get(i - 1)).name);
                                            totalHappiness += Calculate_Happiness.calcHappinessBetweenTwo(People.getPerson(seating.get(i)).name, People.getPerson(seating.get(0)).name);
                                        } else {
                                            totalHappiness += Calculate_Happiness.calcHappinessBetweenTwo(People.getPerson(seating.get(i)).name, People.getPerson(seating.get(i - 1)).name);
                                            totalHappiness += Calculate_Happiness.calcHappinessBetweenTwo(People.getPerson(seating.get(i)).name, People.getPerson(seating.get(i + 1)).name);
                                        }
                                    }catch (NullPointerException ne){System.out.print("Invalid Person");}
                                }
                                System.out.print("Total Score For Seating" + stringList(seating) + ": ");
                                return totalHappiness;
                            }
                            --------------------------------------------------------------------------------------------
                                static int calculateTotalHappinessOfTable(String[] seating){
                                    int totalHappiness = 0;
                                    System.out.println("seating.length: " + seating.length);
                                    for (int i = 0; i < seating.length; i++){

                                        if(i == 0){
                                            totalHappiness += Calculate_Happiness.calcHappinessBetweenTwo(People.getPerson(seating[i]).name, People.getPerson(seating[seating.length-1]).name);
                                            totalHappiness += Calculate_Happiness.calcHappinessBetweenTwo(People.getPerson(seating[i]).name, People.getPerson(seating[i+1]).name);
                                        }
                                         else if(i == (seating.length-1)){
                                            totalHappiness += Calculate_Happiness.calcHappinessBetweenTwo(People.getPerson(seating[i]).name, People.getPerson(seating[i-1]).name);
                                            totalHappiness += Calculate_Happiness.calcHappinessBetweenTwo(People.getPerson(seating[i]).name, People.getPerson(seating[0]).name);
                                        }
                                        else{
                                            totalHappiness += Calculate_Happiness.calcHappinessBetweenTwo(People.getPerson(seating[i]).name, People.getPerson(seating[i-1]).name);
                                            totalHappiness += Calculate_Happiness.calcHappinessBetweenTwo(People.getPerson(seating[i]).name, People.getPerson(seating[i+1]).name);
                                        }

                                    }
                                    System.out.print("Total Score For Seating" + stringList(seating) + ": ");
                                    return totalHappiness;
                                }